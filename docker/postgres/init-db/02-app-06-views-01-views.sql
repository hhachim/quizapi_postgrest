-- -----------------------------------------------------
-- VIEWS: Vues pour simplifier les requêtes complexes
-- Vues pour exposer des données préformatées et faciliter les requêtes courantes
-- -----------------------------------------------------

-- Vue des quiz publics avec leurs informations complètes
-- CREATE OR REPLACE VIEW public_quizzes_view AS
-- SELECT 
--     q.id,
--     q.title,
--     q.description,
--     q.difficulty_level,
--     q.time_limit,
--     q.passing_score,
--     q.is_public,
--     q.created_at,
--     c.name AS category_name,
--     c.id AS category_id,
--     u.username AS creator_username,
--     u.id AS creator_id,
--     (SELECT COUNT(*) FROM quiz_questions qq WHERE qq.quiz_id = q.id) AS question_count,
--     (SELECT array_agg(t.name) FROM tags t JOIN quiz_tags qt ON t.id = qt.tag_id WHERE qt.quiz_id = q.id) AS tags
-- FROM 
--     quizzes q
-- JOIN 
--     categories c ON q.category_id = c.id
-- JOIN 
--     users u ON q.created_by = u.id
-- WHERE 
--     q.status = 'PUBLISHED'
--     AND q.is_public = TRUE
--     AND q.deleted_at IS NULL
--     AND c.deleted_at IS NULL;

-- -- Vue des statistiques détaillées des utilisateurs
-- CREATE OR REPLACE VIEW user_detailed_stats_view AS
-- SELECT 
--     u.id AS user_id,
--     u.username,
--     COALESCE(us.total_attempts, 0) AS total_attempts,
--     COALESCE(us.completed_attempts, 0) AS completed_attempts,
--     COALESCE(us.passed_attempts, 0) AS passed_attempts,
--     COALESCE(us.average_score, 0) AS average_score,
--     COUNT(DISTINCT qz.category_id) AS categories_attempted,
--     (SELECT COUNT(*) FROM user_badges ub WHERE ub.user_id = u.id) AS badges_count,
--     (
--         SELECT array_agg(DISTINCT c.name) 
--         FROM quiz_attempts qa 
--         JOIN quizzes qz ON qa.quiz_id = qz.id 
--         JOIN categories c ON qz.category_id = c.id 
--         WHERE qa.user_id = u.id AND qa.is_completed = TRUE
--     ) AS completed_categories,
--     (
--         SELECT MAX(qa.score) 
--         FROM quiz_attempts qa 
--         WHERE qa.user_id = u.id AND qa.is_completed = TRUE
--     ) AS best_score,
--     u.created_at AS user_since,
--     (
--         SELECT MAX(qa.created_at) 
--         FROM quiz_attempts qa 
--         WHERE qa.user_id = u.id
--     ) AS last_activity
-- FROM 
--     users u
-- LEFT JOIN 
--     user_statistics us ON u.id = us.user_id
-- WHERE 
--     u.is_active = TRUE 
--     AND u.deleted_at IS NULL;

-- -- Vue simplifiée des questions avec choix
-- CREATE OR REPLACE VIEW questions_with_choices_view AS
-- SELECT 
--     q.id AS question_id,
--     q.content AS question_content,
--     q.explanation,
--     qt.name AS question_type,
--     q.default_points,
--     (
--         SELECT jsonb_agg(
--             jsonb_build_object(
--                 'id', ac.id,
--                 'content', ac.content,
--                 'is_correct', ac.is_correct,
--                 'match_content', ac.match_content,
--                 'order_num', ac.order_num
--             )
--         )
--         FROM answer_choices ac
--         WHERE ac.question_id = q.id
--     ) AS choices,
--     q.created_at,
--     u.username AS created_by
-- FROM 
--     questions q
-- JOIN 
--     question_types qt ON q.question_type_id = qt.id
-- JOIN 
--     users u ON q.created_by = u.id
-- WHERE 
--     q.deleted_at IS NULL;

-- -- Vue des tentatives de quiz avec résumé des performances
-- CREATE OR REPLACE VIEW quiz_attempt_summary_view AS
-- SELECT 
--     qa.id AS attempt_id,
--     qa.user_id,
--     u.username,
--     qa.quiz_id,
--     q.title AS quiz_title,
--     qa.start_time,
--     qa.end_time,
--     qa.score,
--     q.passing_score,
--     qa.is_passed,
--     qa.status,
--     qa.total_time,
--     c.id AS category_id,
--     c.name AS category_name,
--     (
--         SELECT COUNT(*) 
--         FROM attempt_responses ar 
--         WHERE ar.attempt_id = qa.id
--     ) AS questions_answered,
--     (
--         SELECT COUNT(*) 
--         FROM attempt_responses ar 
--         WHERE ar.attempt_id = qa.id AND ar.is_correct = TRUE
--     ) AS correct_answers,
--     (
--         SELECT COUNT(*) 
--         FROM attempt_responses ar 
--         WHERE ar.attempt_id = qa.id AND ar.is_correct = FALSE
--     ) AS incorrect_answers
-- FROM 
--     quiz_attempts qa
-- JOIN 
--     users u ON qa.user_id = u.id
-- JOIN 
--     quizzes q ON qa.quiz_id = q.id
-- LEFT JOIN 
--     categories c ON q.category_id = c.id;

-- -- Vue pour la recherche de quiz (optimisée pour les fonctionnalités de recherche)
-- CREATE OR REPLACE VIEW quiz_search_view AS
-- SELECT 
--     q.id,
--     q.title,
--     q.description,
--     q.difficulty_level,
--     q.time_limit,
--     q.status,
--     q.is_public,
--     c.name AS category_name,
--     u.username AS creator_name,
--     (
--         SELECT string_agg(t.name, ', ')
--         FROM tags t
--         JOIN quiz_tags qt ON t.id = qt.tag_id
--         WHERE qt.quiz_id = q.id
--     ) AS tags,
--     q.created_at,
--     (
--         SELECT COUNT(*)
--         FROM quiz_attempts qa
--         WHERE qa.quiz_id = q.id
--     ) AS attempt_count,
--     (
--         SELECT AVG(qa.score)
--         FROM quiz_attempts qa
--         WHERE qa.quiz_id = q.id AND qa.is_completed = TRUE
--     ) AS average_score,
--     to_tsvector('english', q.title || ' ' || COALESCE(q.description, '') || ' ' || c.name || ' ' || 
--         COALESCE((
--             SELECT string_agg(t.name, ' ')
--             FROM tags t
--             JOIN quiz_tags qt ON t.id = qt.tag_id
--             WHERE qt.quiz_id = q.id
--         ), '')
--     ) AS search_vector
-- FROM 
--     quizzes q
-- JOIN 
--     categories c ON q.category_id = c.id
-- JOIN 
--     users u ON q.created_by = u.id
-- WHERE 
--     q.deleted_at IS NULL;

-- -- Index sur le vecteur de recherche
-- CREATE INDEX idx_quiz_search ON quiz_search_view USING GIN(search_vector);